#!/usr/bin/env bash
#
# DahBox
#
#  Copyright 2020 Jérémie Lesage, Jeci <https://jeci.fr/>
#
# This file is part of GNU grep.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


set -o pipefail

declare -r ACTION="$1"
shift
NAME=
REGISTRY=docker.io/library
COMMAND=
FROM=alpine
TAG=:latest
FORCE="false"
UPDATE="false"
DEBUG="false"
PACKAGES=""
declare -a ENVS

# https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

function _main() {
  _prereq

  if [[ -z "$ACTION" ]]; then
    _usage
    exit 1
  fi

  case "$ACTION" in
    create)
    _create "$@"
    ;;
    update)
    _update "$@"
    ;;
    list)
    _list
    ;;
    purge)
    _purge
    ;;
    *)
      _usage
      exit 1
    ;;
  esac
}

function _usage() {
  echo "Usage: dahbox ACTION [name] [options] [packages]"
  echo "  action"
  echo "    create NAME : name off the script to create"
  echo "    list        : print local dahbox"
  echo "    purge       : remove all local dahbox images"
  echo "    update NAME : pull from image and remove local dahbox images"
  echo "  options"
  echo "    --command, -c CMD : Command use to start container"
  echo "    --debug           : echo bash command"
  echo "    --env, -e ENV=VAL : pass en env to container"
  echo "    --force, -f       : force overwrite file if already exist"
  echo "    --from, -f IMAGE  : base image (default: alpine)"
  echo "    --tag, -t TAG     : base image (default: latest)"
  echo "    --update, -u      : overwrite file if already (implies --force) exist and remove local dahbox images"
  echo "  packages"
  echo "    list of packages you want in the container"
}

function _prereq() {
  if ! command -v podman >/dev/null 2>&1; then
    echo "=E= Missing podman"
    exit 1
  elif ! command -v buildah >/dev/null 2>&1; then
    echo "=E= Missing buildah"
    exit 1
  fi
}

function _option() {
  COMMAND=$NAME
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -f|--from)
        shift
        FROM="$1"
        shift
      ;;
      -t|--tag)
        shift
        TAG=":$1"
        shift
      ;;
      -c|--command)
        shift
        COMMAND="$1"
        shift
      ;;
      -e|--env)
        shift
        ENVS+=( "-e $1" )
        shift
      ;;
      --force)
        FORCE="true"
        shift
      ;;
      --update)
        FORCE="true"
        UPDATE="true"
        shift
      ;;
      --debug)
        DEBUG="true"
        shift
      ;;
      *)
        PACKAGES+="$1 "
        shift
      ;;
    esac
  done
}

function _create() {
  NAME="$1"
  shift

  if [[ -z "$NAME" ]]; then
    _usage
    exit 1
  fi

  _option "$@"

  script_name="$DIR/${NAME}"

  if [[ ${FORCE} == false ]] && [[ -f ${script_name} ]]; then
    echo "=E= File ${script_name} already exist, use --force "
    exit 3
  fi

  install_init=
  case "$FROM" in
    alpine)
      install_cmd="apk add"
    ;;
    fedora)
      install_cmd="dnf install -y"
    ;;
    centos)
      install_cmd="dnf install -y"
    ;;
    debian|ubuntu)
      install_init="apt-get update"
      install_cmd="apt-get install -y"
    ;;
    node)
      install_cmd="npm install -g"
    ;;
    *)
      echo "=I= Base not know, please define --install_cmd and --install_init"
      echo "=I= Or don't try to install package"
    ;;
  esac

  image_id=$(get_image_id ${NAME})
  if [[ ${UPDATE} == true ]] && [[ -n ${image_id} ]]; then
    echo "=-= Remove dahbox ${NAME} =-="
    podman image rm "$image_id"
  fi

  # shellcheck disable=SC2086
  cat > "${script_name}" <<EOF
#!/usr/bin/env bash
# =-=
# =-= DahBox ${NAME} =-= #
# =-=
$( [[ ${DEBUG} == true ]] && echo "set -x")
image_id=\$(podman image ls --filter 'label=fr.jeci.dahbox.name=${NAME}' --noheading --quiet)

if [[ -z "\$image_id" ]]; then
  echo "=-= DahBox Build ${NAME} =-="
  container=\$(buildah from ${REGISTRY}/${FROM}${TAG})
  $( [[ -n "$install_init" ]] && \
  echo buildah run \"\$container\" -- ${install_init} )
  $( [[ -n "$PACKAGES" ]] && \
  echo buildah run \"\$container\" -- ${install_cmd} ${PACKAGES} )

  ## Include some buildtime annotations
  buildah config --label "fr.jeci.dahbox.name=${NAME}" "\$container"
  buildah config --label "fr.jeci.dahbox.from=${REGISTRY}/${FROM}${TAG}" "\$container"
  buildah commit "\$container" "dahbox/${NAME}"
  echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
fi

podman run --rm \\
  ${ENVS[@]} \\
  -v "\$HOME:\$HOME" -w "\$PWD" \\
  --init -it --net host \\
  "dahbox/${NAME}" ${COMMAND} "\$@"
EOF

  chmod +x "${script_name}"

  echo "=-= Script created : ${script_name} =-="
}


function _update() {
  NAME="$1"
  shift

  if [[ -z "$NAME" ]]; then
    _usage
    exit 1
  fi

  _option "$@"

  script_name="$DIR/${NAME}"
  image_id=$(get_image_id "${NAME}")
  image_from=$(get_image_from "${image_id}")

  echo "=-= Pull $image_from =-="
  podman pull "$image_from"
  echo "=-= Remove dahbox ${NAME} =-="
  podman image rm "$image_id"
}

function get_image_id() {
  podman image ls --filter "label=fr.jeci.dahbox.name=$1"  --format '{{ .Id }}'
}

function get_image_from() {
  podman image inspect "$1"  --format '{{ index .Labels "fr.jeci.dahbox.from" }}'
}

function _list() {
  echo "=-= Local DahBox =-="
  podman image ls --filter 'reference=localhost/dahbox/'
}

function _purge() {
  echo "=-= Remove All DahBox Image =-="
  # shellcheck disable=SC2046
  podman image rm $(podman image ls --filter 'reference=localhost/dahbox/' -nq)
}

function _sample() {
  echo "=-= Sample DahBox =-="

}

_main  "$@"

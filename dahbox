#!/usr/bin/env bash
#
# DahBox
#
#  Copyright 2020-2021 Jérémie Lesage, Jeci <https://jeci.fr/>
#
# This file is part of GNU grep.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

DAHBOX_VERSION=beta
DAHBOX_COMMAND=$(basename "$0")


# store arguments in a special array
args=("$@")
# get number of elements
ELEMENTS=${#args[@]}

# echo each element in array
# for loop
for (( i=0;i<$ELEMENTS;i++)); do
  param=${args[${i}]}
  [[ "$param" == "--force" ]] && continue
  DAHBOX_COMMAND+=" "
  [[ "$param" =~ " " ]] && DAHBOX_COMMAND+='"'
  DAHBOX_COMMAND+=$(echo -n "$param" | sed 's/\$/\\\$/g')
  [[ "$param" =~ " " ]] && DAHBOX_COMMAND+='"'
done

set -o pipefail

declare -r ACTION="$1"
shift
NAME=
REGISTRY=docker.io
PODMAN_USERNS=keep-id
SE_LABEL_OPTS="label=type:container_runtime_t"
COMMAND=
FROM=alpine
TAG=:latest
FORCE="false"
DEBUG="false"
PACKAGES=""
install_cmd=""
install_init=""
entrypoint=""
declare -a ENVS

if [[ -z "$DAHBOX_HOME" ]]; then
  # https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
  DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
else
  DIR=$DAHBOX_HOME
fi

function _main() {
  _prereq

  if [[ -z "$ACTION" ]]; then
    _usage
    exit 1
  fi

  case "$ACTION" in
    create)
    _create "$@"
    ;;
    update)
    _update "$@"
    ;;
    list)
    _list
    ;;
    prune)
    _prune
    ;;
    direnv)
    _direnv
    ;;
    export)
    _export
    ;;
    version)
    echo "$DAHBOX_VERSION"
    exit 0
    ;;
    *)
    _usage
    exit 0
    ;;
  esac
}

function _usage() {
  echo "Usage: dahbox ACTION [name] [options] [packages]"
  echo "  action"
  echo "    create NAME : name off the script to create"
  echo "    list        : print local dahbox"
  echo "    prune       : remove all local dahbox images"
  echo "    direnv      : init direnv locally"
  echo "    update NAME : update (pull) the from image and remove local dahbox images"
  echo "    export      : export configuration of boxes define in DAHBOX_HOME"
  echo "  options"
  echo "    --command, -c CMD : Command use to start container"
  echo "    --debug           : echo bash command"
  echo "    --env, -e ENV=VAL : pass en env to container"
  echo "    --force, -f       : force overwrite file if already exist"
  echo "    --from, -f IMAGE  : base image (default: alpine)"
  echo "    --tag, -t TAG     : base image (default: latest)"
  echo "    --install-cmd     : overwrite the command use to install packages"
  echo "    --install-init    : overwrite the command use before install packages (apt update)"
  echo "    --userns          : Set the  user  namespace  mode for the container. (default: keep-id), see man podman-run for more details"
  echo "    --selabel         : Set the  process label use by the container. (default: 'label=type:container_runtime_t'), see man podman-run for more details"
  echo "    --entrypoint      : Define the entrypoint. "
  echo "    --no-entrypoint   : Dverwrite the pre-define entrypoint. (same as --entrypoint=\"\" ) "
  echo "  packages"
  echo "    list of packages you want in the container"
}

function _prereq() {
  if ! command -v podman >/dev/null 2>&1; then
    echo "=E= Missing podman"
    exit 1
  elif ! command -v buildah >/dev/null 2>&1; then
    echo "=E= Missing buildah"
    exit 1
  fi
}

function _option() {
  COMMAND=$NAME
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -f|--from)
        shift
        FROM="$1"
        shift
      ;;
      -t|--tag)
        shift
        TAG=":$1"
        shift
      ;;
      -c|--command)
        shift
        COMMAND="$1"
        shift
      ;;
      -e|--env)
        shift
        ENVS+=( "-e $1" )
        shift
      ;;
      --force)
        FORCE="true"
        shift
      ;;
      --debug)
        DEBUG="true"
        shift
      ;;
      --install-cmd)
        shift
        install_cmd="$1"
        shift
      ;;
      --install-init)
        shift
        install_init="$1"
        shift
      ;;
      --userns)
        shift
        PODMAN_USERNS="$1"
        shift
      ;;
      --selabel)
        shift
        SE_LABEL_OPTS="$1"
        shift
      ;;
      --entrypoint)
        shift
        entrypoint="$1"
        shift
      ;;
      --no-entrypoint)
        entrypoint="_EMPTY_"
        shift
      ;;
      *)
        PACKAGES+="$1 "
        shift
      ;;
    esac
  done
}

function _create() {
  NAME="$1"
  shift

  if [[ -z "$NAME" ]]; then
    _usage
    exit 1
  fi

  _option "$@"

  script_name="$DIR/${NAME}"

  if [[ ${FORCE} == false ]] && [[ -f ${script_name} ]]; then
    echo "=E= File ${script_name} already exist, use --force "
    exit 3
  fi

  if [[ -z "$install_init" ]]; then
    _fix_install_init
  fi

  if [[ -z "$install_cmd" ]]; then
    _fix_install_cmd
  fi

  SECURITY_OPT=
  if [ -n "$SE_LABEL_OPTS" ]; then
    SECURITY_OPT="--security-opt $SE_LABEL_OPTS"
  fi
  DAHBOX_SHA=$(echo -n $DAHBOX_COMMAND | sha1sum | tr -d " -")

  ENTRYPOINT=
  if [ "$entrypoint" == "_EMPTY_" ]; then
    ENTRYPOINT='--entrypoint ""'
  elif [ -n "$entrypoint" ]; then
    ENTRYPOINT="--entrypoint $entrypoint"
  fi

  # shellcheck disable=SC2086
  cat > "${script_name}" <<EOF
#!/usr/bin/env bash
# =-=        $(printf "%${#NAME}s") =-= #
# =-= DahBox ${NAME} =-= #
# =-=        $(printf "%${#NAME}s") =-= #

# DAHBOX_VERSION=${DAHBOX_VERSION}
# DAHBOX_HOME=${DIR}
# DAHBOX_DATE=$(date)
# DAHBOX_COMMAND=${DAHBOX_COMMAND}
# DAHBOX_SHA=${DAHBOX_SHA}

$( [[ ${DEBUG} == true ]] && echo "set -x")
# 1. Check Image
image_id=\$(podman image ls --filter 'label=fr.jeci.dahbox.name=${NAME}' --filter 'label=fr.jeci.dahbox.sha=${DAHBOX_SHA}' --noheading --quiet)

# 2. Build Image
if [[ -z "\$image_id" ]]; then
  echo "=-= DahBox Build ${NAME} =-="
  container=\$(buildah from ${REGISTRY}/${FROM}${TAG})
  $( [[ -n "$install_init" ]] && \
  echo buildah run \"\$container\" -- ${install_init} )
  $( [[ -n "$PACKAGES" ]] && \
  echo buildah run \"\$container\" -- ${install_cmd} ${PACKAGES} )

  ## Include some buildtime annotations
  buildah config --label "fr.jeci.dahbox.name=${NAME}" "\$container"
  buildah config --label "fr.jeci.dahbox.from=${REGISTRY}/${FROM}${TAG}" "\$container"
  buildah config --label "fr.jeci.dahbox.sha=${DAHBOX_SHA}" "\$container"
  buildah commit "\$container" "dahbox/${NAME}:${DAHBOX_SHA}"
  echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
fi

export PODMAN_USERNS=${PODMAN_USERNS}

# 3. Run container
podman run --rm \\
  ${ENVS[@]} \\
  -v "\$HOME:\$HOME" -w "\$PWD" \\
  --init -it --net host ${SECURITY_OPT} ${ENTRYPOINT} \\
  "dahbox/${NAME}:${DAHBOX_SHA}" ${COMMAND} "\$@"
EOF

  chmod +x "${script_name}"

  echo "=-= Script created : ${script_name} =-="
}

function _fix_install_cmd() {
  case "$FROM" in
    alpine)
      install_cmd="apk add"
    ;;
    fedora)
      install_cmd="dnf install -y"
    ;;
    centos)
      install_cmd="dnf install -y"
    ;;
    debian|ubuntu)
      install_init="apt-get update"
      install_cmd="apt-get install -y"
    ;;
    node)
      install_cmd="npm install -g"
    ;;
    *)
    if [[ -n "$PACKAGES" ]]; then
      echo "=W= FROM image not know, we can't install ${PACKAGES}"
      echo "=W= please define --install-cmd and --install-init"
    fi
    ;;
  esac
}

function _fix_install_init() {
  case "$FROM" in
    debian|ubuntu)
      install_init="apt-get update"
    ;;
    *)
      # Do nothing
    ;;
  esac
}

function _update() {
  NAME="$1"
  shift

  if [[ -z "$NAME" ]]; then
    _usage
    exit 1
  fi

  _option "$@"

  script_name="$DIR/$NAME"
  image_sha=$(awk -F= '/^# DAHBOX_SHA=/ { print $2 }' "$script_name")
  image_id=$(get_image_id "$NAME" "$image_sha")
  image_from=$(get_image_from "$image_id")

  echo "=-= Pull $image_from =-="
  buildah pull "$image_from"
  echo "=-= Remove dahbox $NAME =-="
  buildah rmi "$image_id"
}

function get_image_id() {
  podman image ls \
    --filter "label=fr.jeci.dahbox.name=$1" \
    --filter "label=fr.jeci.dahbox.sha=$2" \
    --format '{{ .Id }}'
}

function get_image_from() {
  podman image inspect "$1"  --format '{{ index .Labels "fr.jeci.dahbox.from" }}'
}

function _list() {
  echo "=-= Local DahBox =-="
  podman image ls --filter 'reference=localhost/dahbox/'
}

function _prune() {
  echo "=-= Remove All DahBox Image =-="
  # shellcheck disable=SC2046
  podman image rm $(podman image ls --filter 'reference=localhost/dahbox/' -nq)
}

function _direnv() {
  echo "=-= Init DirEnv Locally =-="
  mkdir -p .dahbox

  cat > ".envrc" <<EOF
PATH_add $PWD/.dahbox
export DAHBOX_HOME=$PWD/.dahbox
EOF
  direnv allow
}

function _export() {
  echo "# =-= Export boxes in $DAHBOX_HOME =-="
  for box in $(ls "$DAHBOX_HOME"); do
    [[ "$box" == "dahbox" ]] && continue
    sed -n '/^# DAHBOX_COMMAND=/ s/// p' "$DAHBOX_HOME/$box"
  done
}

function _sample() {
  echo "=-= Sample DahBox =-="

}

_main  "$@"
